syntax="proto3";

package example;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/hrabalvojta/grpc-test/proto;example";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "gRPC test app";
    description: "This is a sample API server.";
    contact: {
      name: "Vojtech Hrabal";
      url: "http://www.hrabalvojta.com/support";
      email: "support@hrabalvojta.com"
    },
    license: {
      name: "Apache 2.0";
      url: "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/hrabalvojta/grpc-test";
    description: "gRPC-gateway test project";
  };
  schemes: HTTPS;
};

service UserService {
  rpc AddUser(AddUserRequest) returns (User) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/users
      post: "/api/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user"
      description: "Add a user to the server."
      tags: "Users"
    };
  }
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/users/{id}
      get: "/api/v1/users/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user by their ID"
      description: "Gets a user from the server."
      tags: "Users"
    };
  }
  rpc ListUsers(ListUsersRequest) returns (stream User) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/users
      get: "/api/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List users"
      description: "List all users on the server."
      tags: "Users"
    };
  }
}

message AddUserRequest {
  string email = 1;
}

message GetUserRequest {
  string id = 1;
}

message ListUsersRequest {}

message User {
  string id = 1;
  string email = 2;
}
